*ember_tools.txt*	Tools for working with ember.js projects

==============================================================================
CONTENTS                                    *ember_tools*   *ember_tools-contents*

    Installation................................: |ember_tools-installation|
    Usage.......................................: |ember_tools-usage|
    Settings....................................: |ember_tools-settings|
    Internals...................................: |ember_tools-internals|
    Issues......................................: |ember_tools-issues|


==============================================================================
INSTALLATION                                          *ember_tools-installation*

There are several ways to install the plugin. The recommended one is by using
Tim Pope's pathogen (http://www.vim.org/scripts/script.php?script_id=2332). In
that case, you can clone the plugin's git repository like so:
>
    git clone git://github.com/AndrewRadev/ember_tools.vim.git ~/.vim/bundle/ember_tools
<
If your vim configuration is under git version control, you could also set up
the repository as a submodule, which would allow you to update more easily.
The command is (provided you're in ~/.vim):
>
    git submodule add git://github.com/AndrewRadev/ember_tools.vim.git bundle/ember_tools
<

Another way is to simply copy all the essential directories inside the ~/.vim
directory: autoload, doc, plugin.


==============================================================================
USAGE                                                        *ember_tools-usage*

This plugin is a place for various tools to work with ember.js projects. After
installing it, just editing files in an ember.js project should be enough to
activate them. It's similar to (and inspired by) rails.vim.

The tools work both for javascript and coffeescript, and they also support
both handlebars and the emblem templating language.

It's recommended to also use the vim-projectionist plugin
(https://github.com/tpope/vim-projectionist) for easier navigation through the
project. Here's a sample json file you might use with it:
https://gist.github.com/AndrewRadev/3524ee46bca8ab349329. It sets up the major
file types you might want to navigate to, and it connects routes, controllers,
and templates, so that the |:A| command jumps from route to controller, to
template, and then back to a route.

A list of the different tools that the plugin provides follows.


                                                                *ember_tools-gf*
gf ~

This plugin sets a special |includeexpr| that does a good job of locating
files based on contextual information. This includes not only |gf|, but the
entire family of mappings that depends on |includeexpr|, like |CTRL-W_f|. From
now on, for clarity, only "gf" will be used.

gf: Routes ~

Pressing |gf| on a route in the `app/routes.js` file will open the relevant
route file. This attempts to respect nesting as well, so as long as your
routes don't do anything too fancy, the plugin will probably manage to find
out where it's supposed to go. For example:
>
    Router.map(function() {
      this.route('foo', function() {
        this.route('bar-baz');
      })
    });
<
Pressing |gf| on "bar-baz" will jump to "app/routes/foo/bar-baz.js", provided
that file exists.

gf: Components in templates ~

Pressing |gf| on a component name in a template files will jump to that
component's template. For example:
>
    <header>
      {{header-navigation user=currentUser}}
    </header>
<
Pressing |gf| while on "header-navigation" will jump to
"app/components/header-navigation/template.hbs", or
"app/templates/components/header-navigation.hbs", if any of those files exists.

gf: Actions in templates ~

Pressing |gf| on an action name in a template files will jump to the current
template's controller or component, and jump to the particular action. So,
having a file like this:
>
    <header>
      {{header-navigation onHover=(action 'showTooltip')}}
    </header>
<
Pressing |gf| while on "showTooltip" will jump to the current template's
controller/component file and find the "showTooltip" action.

gf: Services ~

If you have a service defined in, for example, the file
"app/services/cookie-settings.js", then you can jump to that file while
hitting |gf| on the point of injection of the service:
>
    import Ember from 'ember';

    export default Ember.Service.extend({
      cookieSettings: Ember.inject.service()
      // ...
    });
<
A |gf| on "cookieSettings" will jump to the right file, if it exists. If you
actually use the service with `this.get`, you can also |gf| there as well:
>
    this.get('cookieSettings.someProperty');
<
A |gf| on "cookieSettings" in the `get` will also work, as long as there's an
injection line in the file.

gf: Models ~

If you have a method call that is related to a model, then a |gf| on it will
throw you to that model. For instance,
>
    export default Ember.Model.extend({
      user: DS.belongsTo("user")
    });
<
A |gf| on the "user" in the `belongsTo` call will jump to the user model, if
it exists. The method calls that work this way are:

- `createRecord`
- `modelFor`
- `belongsTo`
- `hasMany`

gf: Imports ~

If you have a relative import line, like this:
>
    import Ember from 'ember';
    import ControllerCommonMixin from '../../mixins/controller-common';

    export default Ember.Controller.extend(ControllerCommonMixin)
<
Using |gf| on "../../mixins/controller-common" will work and send you to the
right file, relative to the current one.


                                                          *ember_tools-:Extract*
:Extract ~

The `:Extract` command is invoked on a range of lines, usually in visual mode.
It's only defined in templating languages (handlebars or emblem). It takes the
selected lines and moves them to a separate component's template. It also
creates a placeholder component file for them.

So, if you have a template that looks like this:
>
    <header>
      <ul>
        <li>{{#link-to 'index'}}Home{{/link-to}}</li>
        <li>{{#link-to 'login'}}Login{{/link-to}}</li>
      </ul>
    </header>
<
You can mark everything within the `<header>` tag and execute this command:
>
    :Extract header-navigation
<
This will create the following files:

- app/components/header-navigation/component.js
- app/components/header-navigation/template.hbs

The original template will now look like this:
>
    <header>
      {{header-navigation}}
    </header>
<
And the header-navigation template file will be opened in a split window and
will contain:
>
    <ul>
      <li>{{#link-to 'index'}}Home{{/link-to}}</li>
      <li>{{#link-to 'login'}}Login{{/link-to}}</li>
    </ul>
<
If the original template is an emblem one, the component will also have an
emblem template, but if you'd like to specify explicitly what templates you
prefer, set the |g:ember_tools_default_logic_filetype| and/or
|g:ember_tools_default_template_filetype| configuration variables.



==============================================================================
SETTINGS                                                  *ember_tools-settings*

                                          *g:ember_tools_default_logic_filetype*
>
    let g:ember_tools_default_logic_filetype = 'coffee'
<
Default value: javascript

This variable controls the default logic filetype the plugin will use. In
general, it'll try to use the same filetype as the current file (javascript or
coffeescript), but in situations when it can't guess, it'll read this variable
to find the "default" preference.

                                       *g:ember_tools_default_template_filetype*
>
    let g:ember_tools_default_template_filetype = 'emblem'
<
Default value: handlebars

This variable controls the default template filetype the plugin will use. In
general, it'll try to use the same filetype as the current file (handlebars or
emblem), but in situations when it can't guess, it'll read this variable to
find the "default" preference.

                                             *g:ember_tools_custom_gf_callbacks*
>
    let g:ember_tools_custom_gf_callbacks = ['SomeFunctionName']
<
Default value: []

This variable allows the user to set up custom callbacks for the |gf| mapping.
The variable should be a list of function names. The plugin will call those
without any arguments.

Note that, at this time, the `iskeyword` parameter will be set to include the
"." and "/" characters, in order to make it easier to match some ember
identifiers. Feel free to change it in your callbacks, it will be reset once
the callback is done.

An example of what you could do can be found in this gist:
https://gist.github.com/AndrewRadev/c62132f96deca165b8969eba7bc1dc13

There's quite a few project-specific things, which is why it's not a
general-purpose callback. There's also a few invocations of ember_tools'
public API, which, unfortunately, you would have to read the source code to
understand.

==============================================================================
INTERNALS                                                *ember_tools-internals*

The plugin detects an ember project by going up the roots of files and finding
a file called `ember-cli-build.js`. If there's a detection problem, it might
be related to not being able to find that file for some reason.

The |gf| mapping relies on an odd trick to also find particular areas in the
files it jumps to. It sets a |BufEnter| autocommand for that particular file
to search for a pattern, and it also sets a |BufEnter| autocommand to clear
that autocommand later. See the `ember_tools#SetFileOpenCallback` function for
details.

==============================================================================
ISSUES                                                      *ember_tools-issues*

Any issues and suggestions are very welcome on the github bugtracker:
https://github.com/AndrewRadev/ember_tools.vim/issues


vim:tw=78:sw=4:ft=help:norl:
